package gui;

import control.DefaultController;
import dbtools.ConnectionManager;
import dbtools.Credentials;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.FilenameFilter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 * <code>ServerDialog</code> displays serialized connection credentials, lets
 * the user create new ones and edit them.
 *
 * @author Julian Timpner <j.timpner@tu-bs.de>
 * @version 1.0
 */
public class ServerDialog extends javax.swing.JDialog {

    /** Compiler-generated serial version identifier. */
    private static final long serialVersionUID = -346129608958965566L;
    /** The MVC controller. */
    private DefaultController controller = null;
    /** The parent frame this dialog belongs to. */
    private java.awt.Frame parent = null;
    /** The global <code>logger</code> object. */
    private static Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    /** Constructor specifying a parent frame and a MVC controller. */
    public ServerDialog(java.awt.Frame parent, DefaultController controller) {
        super(parent);

        this.parent = parent;
        this.controller = controller;

        initComponents();
        initTree();
        getRootPane().setDefaultButton(cancelButton);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        serverTree = new javax.swing.JTree();
        labelSelection = new javax.swing.JLabel();
        newServerButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        panelCredentials = new javax.swing.JPanel();
        urlLabel = new javax.swing.JLabel();
        urlField = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        userField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        driverLabel = new javax.swing.JLabel();
        driverField = new javax.swing.JTextField();
        separator = new javax.swing.JSeparator();
        connectButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(control.FDISApp.class).getContext().getResourceMap(ServerDialog.class);
        setTitle(resourceMap.getString("ServerDialogForm.title")); // NOI18N
        setModal(true);
        setName("ServerDialogForm"); // NOI18N
        setResizable(false);

        scrollPane.setName("scrollPane"); // NOI18N

        serverTree.setName("serverTree"); // NOI18N
        serverTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                serverTreeValueChanged(evt);
            }
        });
        scrollPane.setViewportView(serverTree);

        labelSelection.setText(resourceMap.getString("labelSelection.text")); // NOI18N
        labelSelection.setName("labelSelection"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(control.FDISApp.class).getContext().getActionMap(ServerDialog.class, this);
        newServerButton.setAction(actionMap.get("addServer")); // NOI18N
        newServerButton.setText(resourceMap.getString("newServerButton.text")); // NOI18N
        newServerButton.setName("newServerButton"); // NOI18N

        deleteButton.setAction(actionMap.get("removeServer")); // NOI18N
        deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
        deleteButton.setName("deleteButton"); // NOI18N

        panelCredentials.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelCredentials.border.title"))); // NOI18N
        panelCredentials.setName("panelCredentials"); // NOI18N

        urlLabel.setLabelFor(urlField);
        urlLabel.setText(resourceMap.getString("urlLabel.text")); // NOI18N
        urlLabel.setName("urlLabel"); // NOI18N

        urlField.setText(resourceMap.getString("urlField.text")); // NOI18N
        urlField.setName("urlField"); // NOI18N

        userLabel.setLabelFor(userField);
        userLabel.setText(resourceMap.getString("userLabel.text")); // NOI18N
        userLabel.setName("userLabel"); // NOI18N

        userField.setText(resourceMap.getString("userField.text")); // NOI18N
        userField.setName("userField"); // NOI18N

        passwordLabel.setLabelFor(passwordField);
        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setName("passwordField"); // NOI18N

        driverLabel.setLabelFor(driverField);
        driverLabel.setText(resourceMap.getString("driverLabel.text")); // NOI18N
        driverLabel.setName("driverLabel"); // NOI18N

        driverField.setText(resourceMap.getString("driverField.text")); // NOI18N
        driverField.setName("driverField"); // NOI18N

        javax.swing.GroupLayout panelCredentialsLayout = new javax.swing.GroupLayout(panelCredentials);
        panelCredentials.setLayout(panelCredentialsLayout);
        panelCredentialsLayout.setHorizontalGroup(
            panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCredentialsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelCredentialsLayout.createSequentialGroup()
                        .addComponent(urlLabel)
                        .addGap(18, 18, 18)
                        .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelCredentialsLayout.createSequentialGroup()
                        .addComponent(userLabel)
                        .addGap(18, 18, 18)
                        .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelCredentialsLayout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addGap(18, 18, 18)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelCredentialsLayout.createSequentialGroup()
                        .addComponent(driverLabel)
                        .addGap(18, 18, 18)
                        .addComponent(driverField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        panelCredentialsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {driverLabel, passwordLabel, urlLabel, userLabel});

        panelCredentialsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {driverField, passwordField, urlField, userField});

        panelCredentialsLayout.setVerticalGroup(
            panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCredentialsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driverLabel)
                    .addComponent(driverField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        separator.setName("separator"); // NOI18N

        connectButton.setAction(actionMap.get("connectToServer")); // NOI18N
        connectButton.setText(resourceMap.getString("connectButton.text")); // NOI18N
        connectButton.setName("connectButton"); // NOI18N

        okButton.setAction(actionMap.get("saveServer")); // NOI18N
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        cancelButton.setAction(actionMap.get("cancel")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSelection)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newServerButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton))
                            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelCredentials, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(okButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(separator, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, newServerButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, connectButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(deleteButton)
                    .addComponent(newServerButton))
                .addGap(8, 8, 8)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(connectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler, that deals with selection of profiles aka credentials
     * in the tree. A selected credentials object will be deserialized and its
     * fields will be displayed and be editable.
     *
     * @param evt an event of selecting a tree node.
     */
    private void serverTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_serverTreeValueChanged
        DefaultMutableTreeNode node =
                (DefaultMutableTreeNode) serverTree.getLastSelectedPathComponent();

        /* If nothing is selected... */
        if (node == null) {
            return;
        }

        /* React to the node selection. */

        boolean isRoot = serverTree.getModel().getRoot().equals(node);

        if (!isRoot) {
            String filename = node.toString();

            userField.setEnabled(true);
            urlField.setEnabled(true);
            passwordField.setEnabled(true);
            driverField.setEnabled(true);

            // Deserialize credentials.
            Credentials cred = ConnectionManager.getCred();
            if (cred != null) {
                controller.removeModel(cred);
            }

            ConnectionManager.loadCred(filename);
            cred = ConnectionManager.getCred();
            controller.addModel(cred);

            String user = cred.getUser();
            String driver = cred.getDriver();
            String url = cred.getUrl();
            String password = new String(cred.getPassword());

            userField.setText(user);
            driverField.setText(driver);
            urlField.setText(url);
            passwordField.setText(password);
        } else {
            userField.setEnabled(false);
            urlField.setEnabled(false);
            passwordField.setEnabled(false);
            driverField.setEnabled(false);

            userField.setText("");
            urlField.setText("");
            passwordField.setText("");
            driverField.setText("");
        }
    }//GEN-LAST:event_serverTreeValueChanged

    /**
     * Handles model changes. Is called by the controller whenever the model
     * reports a state change.
     * 
     * @param evt an event created by the controller whenever a model changes
     * its state.
     */
    public void modelPropertyChange(final PropertyChangeEvent evt) {

        /* URL changed. */
        if (evt.getPropertyName().equals(
                DefaultController.ELEMENT_URL_PROPERTY)) {
            String newStringValue = evt.getNewValue().toString();

            if (!urlField.getText().equals(newStringValue)) {
                urlField.setText(newStringValue);
            }
        /* Driver changed. */
        } else if (evt.getPropertyName().equals(
                DefaultController.ELEMENT_DRIVER_PROPERTY)) {
            String newStringValue = evt.getNewValue().toString();
            if (!driverField.getText().equals(newStringValue)) {
                driverField.setText(newStringValue);
            }
        /* Username changed. */
        } else if (evt.getPropertyName().equals(
                DefaultController.ELEMENT_USER_PROPERTY)) {
            String newStringValue = evt.getNewValue().toString();
            if (!userField.getText().equals(newStringValue)) {
                userField.setText(newStringValue);
            }
        /* Password changed. */
        } else if (evt.getPropertyName().equals(
                DefaultController.ELEMENT_PASSWORD_PROPERTY)) {
            String newStringValue = evt.getNewValue().toString();
            if (!passwordField.getPassword().toString().equals(newStringValue)) {
                passwordField.setText(newStringValue);
            }
        }

    }

    /**
     * Disposes of this context once it is no longer
     * referenced.
     */
    @Action
    public void cancel() {
        // Deserialize credentials.
        Credentials cred = ConnectionManager.getCred();
        if (cred != null) {
            controller.removeModel(cred);
        }

        ConnectionManager.setCred(new Credentials());

        serverTree.setSelectionRow(0);
        dispose();
    }

    /**
     * Initializes the <code>JTree</code>, that shows all available serialized
     * <code>Credentials</code> objects.
     */
    public void initTree() {
        String fs = System.getProperty("file.separator");
        String dir = System.getProperty("user.dir");

        DefaultMutableTreeNode rootNode = null;
        DefaultMutableTreeNode node = null;

        rootNode = new DefaultMutableTreeNode("My Profiles");

        FilenameFilter filter = new SERFilter();

        // make directory 'serialize'
        boolean fileStatus = new File(dir + fs + "serialize").mkdir();

        File maindir = new File(dir + fs + "serialize");
        File files[] = maindir.listFiles(filter);
        String fullName, name;
        int i;
        for (File f : files) {
            fullName = f.toString();
            i = fullName.lastIndexOf(fs) + 1;
            name = fullName.substring(i, fullName.length() - 4);
            node = new DefaultMutableTreeNode(name);
            rootNode.add(node);
        }

        DefaultTreeModel model = (DefaultTreeModel) serverTree.getModel();
        model.setRoot(rootNode);

        serverTree.setModel(model);
        serverTree.setSelectionRow(0);
        serverTree.getSelectionModel().setSelectionMode(
                TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    /**
     * Inner class that provides a convenient way to filter file names, so that
     * only <code>.ser</code> files are considered.
     */
    class SERFilter implements FilenameFilter {

        @Override
        public boolean accept(File dir, String name) {
            return (name.endsWith(".ser"));
        }
    }

    /**
     * Creates a new <code>Credentials</code> object and serializes it.
     */
    @Action
    public void addServer() {
        serverTree.setSelectionRow(0);

        String filename = null;
        String ls = System.getProperty("line.separator");
        filename = (String) JOptionPane.showInputDialog(
                null,
                "Please insert a profile name: " + ls,
                "New Profile",
                JOptionPane.QUESTION_MESSAGE);

        if (((filename != null) && (filename.length() > 0))) {
            Credentials cred = ConnectionManager.getCred();
            if (cred != null) {
                controller.removeModel(cred);
            }
            DefaultTreeModel model = (DefaultTreeModel) serverTree.getModel();
            TreePath path = serverTree.getNextMatch("", 0, Position.Bias.Forward);
            MutableTreeNode node = (MutableTreeNode) path.getLastPathComponent();

            // Create new node.
            MutableTreeNode newNode = new DefaultMutableTreeNode(filename);

            cred = new Credentials();
            ConnectionManager.setCred(cred);
            ConnectionManager.saveCred(filename);
            controller.addModel(cred);

            // Insert new node as last child of node.
            model.insertNodeInto(newNode, node, node.getChildCount());

            path = serverTree.getNextMatch(filename, 0, Position.Bias.Forward);
            serverTree.setSelectionPath(path);
            serverTree.scrollPathToVisible(path);
        }
    }

    /**
     * Propagates the credential values to the controller for a model state
     * change. Then, serializes the <code>Crendentials</code> object.
     */
    @Action
    public void saveServer() {

        try {
            controller.changeElementUser(userField.getText());
            controller.changeElementDriver(driverField.getText());
            controller.changeElementUrl(urlField.getText());
            String password = new String(passwordField.getPassword());
            controller.changeElementPassword(password);
        } catch (Exception e) {
            logger.logp(Level.SEVERE, ServerDialog.class.getName(),
                    "saveServer",
                    "Couldn't change credential properties.", e);
        }

        DefaultMutableTreeNode node =
                (DefaultMutableTreeNode) serverTree.getLastSelectedPathComponent();
        String filename = node.toString();
        /* Make sure, it's not the root that is selected. */
        boolean isRoot = serverTree.getModel().getRoot().equals(node);

        if (!isRoot) {
            ConnectionManager.saveCred(filename);
        }
    }

    /**
     * Removes the selected connection credentials, i.e. deletes the serialized
     * object.
     */
    @Action
    public void removeServer() {
        String fs = System.getProperty("file.separator");
        String dir = System.getProperty("user.dir");

        DefaultMutableTreeNode node =
                (DefaultMutableTreeNode) serverTree.getLastSelectedPathComponent();
        String fileName = node.toString();
        /* Make sure, it's not the root that is selected. */
        boolean isRoot = serverTree.getModel().getRoot().equals(node);

        if (!isRoot) {
            ConnectionManager.setCred(new Credentials());

            // A File object to represent the filename.
            File f = new File(dir + fs + "serialize" + fs + fileName + ".ser");

            // Make sure the file or directory exists and isn't write protected.
            if (!f.exists()) {
                throw new IllegalArgumentException(
                        "Delete: no such file or directory: " + fileName);
            }

            if (!f.canWrite()) {
                throw new IllegalArgumentException("Delete: write protected: " +
                        fileName);
            }

            // If it is a directory, make sure it is empty.
            if (f.isDirectory()) {
                String[] files = f.list();
                if (files.length > 0) {
                    throw new IllegalArgumentException(
                            "Delete: directory not empty: " + fileName);
                }
            }

            // Attempt to delete it
            boolean success = f.delete();

            if (!success) {
                throw new IllegalArgumentException("Delete: deletion failed");
            } else {
                // Update tree.
                serverTree.setSelectionRow(0);

                DefaultTreeModel model = (DefaultTreeModel) (serverTree.getModel());
                model.removeNodeFromParent(node);
            }
        }
    }

    /**
     * Connects to a database server using the selected credentials.
     */
    @Action(block = Task.BlockingScope.APPLICATION)
    public Task connectToServer() {
        return new ConnectToServerTask(
                org.jdesktop.application.Application.getInstance(
                control.FDISApp.class));
    }

    private class ConnectToServerTask extends org.jdesktop.application.Task<Object, Void> {

        private boolean isRoot;
        private String filename;

        ConnectToServerTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ConnectToServerTask fields, here.
            super(app);
            DefaultMutableTreeNode node =
                    (DefaultMutableTreeNode) serverTree.getLastSelectedPathComponent();
            filename = node.toString();
            /* Make sure, it's not the root that is selected. */
            isRoot = serverTree.getModel().getRoot().equals(node);

            if (!isRoot) {
                dispose();
            }
        }

        @Override
        protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.

            if (!isRoot) {
                ConnectionManager.loadCred(filename);
                controller.loadDB();
            }
            try {
                for (int i = 0; i < 10; i++) {
                    //setMessage("Working... [" + i + "]");
                    Thread.sleep(80);
                    setProgress(i, 0, 9);
                }

            } catch (InterruptedException ex) {
                logger.logp(Level.SEVERE, ServerDialog.class.getName(),
                        "doInBackground",
                        "Interrupted while loading credentials.", ex);
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField driverField;
    private javax.swing.JLabel driverLabel;
    private javax.swing.JLabel labelSelection;
    private javax.swing.JButton newServerButton;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel panelCredentials;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSeparator separator;
    private javax.swing.JTree serverTree;
    private javax.swing.JTextField urlField;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField userField;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables
}
