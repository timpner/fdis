package control;

import dbtools.ConnectionManager;
import fd.FDep;
import fd.Relation;
import fd.SchemaManager;

/**
 * The <code>DefaultController</code> is the only class extending the
 * <code>AbstractController</code>.
 * <p>
 * This class consists of only property constants and methods called by the
 * GUI event listeners of the view.
 *
 * @author Julian Timpner <j.timpner@tu-bs.de>
 * @version 1.1
 */
public class DefaultController extends AbstractController {

    /**
     * The normalform enumeration. Used for selection of the striven NF.
     */
    public static enum NF {

        /**
         * Second normalform.
         */
        NF2,
        /**
         * Third normalform.
         */
        NF3,
        /**
         * Boyce-Codd normalform.
         */
        BCNF
    }
    /** Schema name property constant. */
    public static final String ELEMENT_SCHEMA_NAME_PROPERTY = "SchemaName";
    /** Relation property constant. */
    public static final String ELEMENT_SCHEMA_RELATIONS_PROPERTY = "Relations";
    /** Name of a given relation property constant. */
    public static final String ELEMENT_RELATION_NAME_PROPERTY = "RelationName";
    /** Attributes property constant. */
    public static final String ELEMENT_RELATION_COLUMNS_PROPERTY = "Columns";
    /** <code>FDep</code> property constant. */
    public static final String ELEMENT_RELATION_FDEPS_PROPERTY = "Fdeps";
    /** Additional FDeps property constant. */
    public static final String ELEMENT_RELATION_ADDITIONAL_FDEPS_PROPERTY =
            "AdditionalFdeps";
    /** Normalform preview property constant. */
    public static final String ELEMENT_RELATION_NF_PREVIEW_PROPERTY =
            "NormalformPreview";
    /** <code>FDep</code> property constant. */
    public static final String ELEMENT_RELATION_NF_PROPERTY = "Normalform";
    /** Normalized relations property constant. **/
    public static final String ELEMENT_NORMALIZATION_PROPERTY =
            "NormalizedRelations";
    /** Name of a normalized relation property constant. */
    public static final String ELEMENT_NORMALIZED_NAME_PROPERTY =
            "Name";
    /** User name property constant. */
    public static final String ELEMENT_USER_PROPERTY = "User";
    /** URL property constant. */
    public static final String ELEMENT_URL_PROPERTY = "Url";
    /** Driver property constant. */
    public static final String ELEMENT_DRIVER_PROPERTY = "Driver";
    /** Password property constant. */
    public static final String ELEMENT_PASSWORD_PROPERTY = "Password";
    /** A <code>SchemaManager</code>. */
    private SchemaManager sManager;
    /** Boolean flag if internal foreign keys are generated automatically. */
    private boolean intraFkEnabled = true;

    /**
     * Class constructor.
     */
    public DefaultController() {
    }

    /**
     * Called by the GUI event listener to propagate a method call to the
     * <code>SchemaManager</code> in order to commit changes of the loaded
     * relation.
     */
    public void commit() {
        sManager.commit();
    }

    /**
     * Propagates a method call to the <code>SchemaManager</code> in order
     * to drop the fd_catalog relations.
     */
    public void dropCatalog() {
        sManager.dropCatalog();
    }

    /**
     * Propagates a method call to the <code>SchemaManager</code> in order 
     * to rollback changes of the loaded relation.
     */
    public void rollback() {
        sManager.rollback();
    }

    /**
     * Called by the UI event listener to propagate a method call to the
     * <code>SchemaManager</code> in order to create a normalization preview.
     */
    public void normalize(NF form) {
        sManager.normalize(form);
    }

    /**
     * Propagates a method call to the <code>SchemaManager</code> in order to
     * commit the schema changes generated by the normalization.
     */
    public void commitNormalization() {
        sManager.commitNormalization();
    }

    /**
     * Called by the UI event listener to propagate a method call to the
     * <code>SchemaManager</code> in order to cancel a previewed normalization.
     */
    public void cancelNormalization() {
        sManager.cancelNormalization();
    }

    /**
     * Propagates a method call to the <code>SchemaManager</code> in order
     * to add a <code>FDep</code> to the loaded relation.
     * 
     * @param fd a functional dependency
     */
    public void addFdep(FDep fd) {
        sManager.addFdep(fd);
    }

    /**
     * Propagates a method call to the <code>SchemaManager</code> in order
     * to remove a <code>FDep</code> of the loaded relation.
     *
     * @param id a functional dependency
     */
    public void removeFDep(Integer id) {
        sManager.removeFDep(id);
    }

    /**
     * Propagates a method call to the <code>SchemaManager</code> in order
     * to determine whether there are changes to the loaded relation.
     *
     * @return true if committable changes exist
     */
    public boolean hasChanges() {
        return sManager.hasChanges();
    }

    /**
     * Called by the GUI event listener to propagate a method call to the 
     * <code>SchemaManager</code> in order to load a database schema.
     */
    public void loadDB() {
        sManager = new SchemaManager(this);
        sManager.loadDB();
    }

    /**
     * Called by the GUI event listener, when a relation is selected. It then 
     * propagates a method call to the <code>SchemaManager</code> in order to
     * load information about the selected relation.
     *
     * @param table the selected relation.
     */
    public void loadRelation(Relation table) {
        sManager.loadRelation(table);
    }

    /**
     * Closes the current connection and deallocates all objects.
     */
    public void closeConnection() {
        ConnectionManager.closeConnection();
        sManager.discard();
    }

    /**
     * Called to fire property changes back to the models. The property changed
     * is the username for a given <code>Credentials</code> object.
     * 
     * @param newUser username for a database connection.
     */
    public void changeElementUser(String newUser) {
        setModelProperty(ELEMENT_USER_PROPERTY, newUser);
    }

    /**
     * Called to fire property changes back to the models. The property changed
     * is the URL to a database.
     * 
     * @param newUrl <code>URL</code> for a database connection.
     */
    public void changeElementUrl(String newUrl) {
        setModelProperty(ELEMENT_URL_PROPERTY, newUrl);
    }

    /**
     * Called to fire property changes back to the models. The property changed
     * is the JDBC driver.
     *
     * @param newDriver a JDBC driver.
     */
    public void changeElementDriver(String newDriver) {
        setModelProperty(ELEMENT_DRIVER_PROPERTY, newDriver);
    }

    /**
     * Called to fire property changes back to the models. The property changed
     * is the password for a database connection.
     * 
     * @param newPassword a database connection password.
     */
    public void changeElementPassword(String newPassword) {
        setModelProperty(ELEMENT_PASSWORD_PROPERTY, newPassword);
    }

    /**
     * Called to fire property changes back to the models. The property changed
     * is the name of a relation, created by the normalization algorithm.
     *
     * @param newName the relation's name
     */
    public void changeElementNormalizedName(String newName) {
        setModelProperty(ELEMENT_NORMALIZED_NAME_PROPERTY, newName);
    }

    /**
     * Set a boolean flag that determines whether internal foreign keys
     * are enabled or not.
     *
     * @param enabled
     */
    public void setIntraFkEnabled(boolean enabled) {
        intraFkEnabled = enabled;
    }

    /**
     * Return whether internal foreign keys are set automatically.
     * 
     * @return true if internal foreign keys are generated
     */
    public boolean isIntraFkEnabled() {
        return intraFkEnabled;
    }
}
